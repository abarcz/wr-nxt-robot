#include "utils.h"
#include "communication.h"
#include "move.h"
#include "pid.h"
#define CPWR_B 60	// base speed of robot
#define CPWR_S 40	// slow speed of robot
#define PWR_T 10	// used for calculating maximum pid correction
#define PID_REF 10	// correct ultrasonic distance from the fence, reference for PID
#define PID_MAX 50	// used for calculating maximum pid correction
#define FRONT_MIN 29	// minimal front light distance from fence for safe operating
#define FFRONTAL_REVT 300	// rev time if full frontal crash
#define FFRONTAL_RANGLE 70
#define LFRONTAL_REVT 300	// rev time if side left frontal crash
#define LFRONTAL_RANGLE 60	// angle (in degrees) to turn if side left frontal crash
#define RFRONTAL_REVT 300
#define RFRONTAL_RANGLE 80
#define FRONT_TT 100		// turn time if danger ahead

/* sensors */
#define LIGHTFRPORT IN_2
#define SONSIDEPORT IN_1
#define TOUCHLPORT IN_4
#define TOUCHRPORT IN_3
#define LIGHTFR Sensor(LIGHTFRPORT)
#define SONSIDE SensorUS(SONSIDEPORT)
#define TOUCHL Sensor(TOUCHLPORT)
#define TOUCHR Sensor(TOUCHRPORT)

/* states */
#define ST_STOP 0
#define ST_FWD 1
#define ST_FRONTT 6	// danger's ahead, must turn

task main ()
{
	int PWR_B = CPWR_B;			// base speed of the robot
	int rob_state;				// robot state for machine of states
	int deviation = 0;			// deviation from correct side distance from fence
	int pid_out = 0;			// PID regulation for side distance output
	int power_corr;				// power correction calculated by PID
	pid_str pid_side;			// PID structure for fence side distance regulation
	pid_init(pid_side, 5, 20, 0);
	/*MEDIAN_EL med_tab[MEDIAN_NUM];
	median_init(med_tab);*/
	
	// initialize sensors
	SetSensor(TOUCHLPORT, SENSOR_TOUCH);
	SetSensor(TOUCHRPORT, SENSOR_TOUCH);
	SetSensorLowspeed(SONSIDEPORT); 
	SetSensorLight(LIGHTFRPORT);

	/*// initialize median for SONSIDE (unused)
	int i, p;
	for(i=0;i<MEDIAN_NUM;i++)
	{
		p = SONSIDE;
		median_append(med_tab, p);
	}*/
	
	while(1)
	{
		// read sensors
		ClearScreen();
		byte ultr = SONSIDE;		
		print_val(LCD_LINE1, "ultra", ultr);	
		byte touchl = TOUCHL;
		print_val(LCD_LINE2, "touchl", touchl);
		byte touchr = TOUCHR;
		print_val(LCD_LINE3, "touchr", touchr);
		byte light_fr = LIGHTFR;
		print_val(LCD_LINE4, "light", light_fr);
		
		// calculate side distance deviation and pid value
		deviation = PID_REF - ultr;
		pid_out = pid_getval(pid_side, deviation);
		print_val(LCD_LINE5, "PID", pid_out);

		// calculate power_corr correction for deviation reduction
		power_corr = abs_i(pid_out * PWR_T / PID_MAX);
		print_val(LCD_LINE6, "POWER_CORR", power_corr);

		// print robot's state
		print_val(LCD_LINE8, "state", rob_state);

		// if full frontal crash, override
		if (touchl && touchr)
		{
			eng_rev(PWR_B);
			Wait(FFRONTAL_REVT);
			eng_stop();
			eng_turn_right(FFRONTAL_RANGLE);
			rob_state = ST_STOP;
		}
		// if side frontal crash, override
		else if (touchl)
		{
			eng_rev(PWR_B);
			Wait(LFRONTAL_REVT);
			eng_turn_right(LFRONTAL_RANGLE);
			rob_state = ST_STOP;
		}
		else if (touchr)
		{
			eng_rev(PWR_B);
			Wait(RFRONTAL_REVT);
			eng_turn_right(RFRONTAL_RANGLE);
			rob_state = ST_STOP;
		}
		// STATE MACHINE
		switch (rob_state)
		{
			case ST_STOP:
				eng_fwd(PWR_B);	
				rob_state = ST_FWD;
				break;
			case ST_FWD:
				if (light_fr < FRONT_MIN)
				{
					PWR_B = CPWR_S;		// slowspeed mode
					//eng_fwd_reg(PWR_B, 0);
					//Wait(FRONT_TT);
					//rob_state = ST_FRONTT;
				}
				else
					PWR_B = CPWR_B;
				break;
			case ST_FRONTT:
				if (light_fr >= FRONT_MIN)
					rob_state = ST_FWD;
				else
				{
					eng_fwd_reg(PWR_B, 0);
					Wait(FRONT_TT);
				}
				break;
		}

		if( pid_out == 0 )
		{
			eng_fwd(PWR_B);
		}
		else if ( pid_out > 0 )
		{
			eng_fwd_reg(min_i(PWR_B + power_corr, 75),max_i(PWR_B - power_corr,10));
		}
		else
		{
			eng_fwd_reg(max_i(PWR_B - power_corr,10), min_i(PWR_B + power_corr, 75));
		}

		Wait(100);
	}
}
