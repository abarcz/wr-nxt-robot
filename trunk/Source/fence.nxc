#include "communication.h"
#include "move.h"
#include "pid.h"
#include "median_tab.h"
#define CPWR_B 60	// base speed of robot
#define CPWR_S 40	// slow speed of robot
#define PWR_T 10
#define PID_REF 10
#define PID_MAX 50
#define MIN_SPD 20
#define FRONT_MIN 29
#define DCORR_TT 50		// turn time for deviation correction
#define DCORR_ST 100		// straight ride time between turns for dev corr
#define FFRONTAL_REVT 300	// rev time if full frontal crash
#define FFRONTAL_RANGLE 70
#define LFRONTAL_REVT 300	// rev time if side left frontal crash
#define LFRONTAL_RANGLE 60	// angle (in degrees) to turn if side left frontal crash
#define RFRONTAL_REVT 300
#define RFRONTAL_RANGLE 80
#define FRONT_TT 100		// turn time if danger ahead

// sensors
#define LIGHTFRPORT IN_2
#define SONSIDEPORT IN_1
#define TOUCHLPORT IN_4
#define TOUCHRPORT IN_3
#define LIGHTFR Sensor(LIGHTFRPORT)
#define SONSIDE SensorUS(SONSIDEPORT)
#define TOUCHL Sensor(TOUCHLPORT)
#define TOUCHR Sensor(TOUCHRPORT)

// states
#define ST_STOP 0
#define ST_FWD 1
#define ST_CORR_L1 2	// phase 1 of left turn correction (must turn left) 
#define ST_CORR_L2 3	// phase 2 of left turn correction
#define ST_CORR_R1 4
#define ST_CORR_R2 5
#define ST_FRONTT 6	// danger's ahead, must turn

int PWR_B = CPWR_B;

int rob_state;		// robot state for machine of states

int min_i (int a, int b)
{
	if (a<b)
		return a;
	else 
		return b;
}

int max_i (int a, int b)
{
	if (a>b)
		return a;
	else 
		return b;
}


int abs_i (int a)
{
	if (a < 0)
		return -a;
	else 
		return a;
}

task main ()
{
	eng_init();
	int deviation = 0;
	int pid_out = 0;
	int power;
	int power_corr_saved;
	pid_str pid_side;
	pid_init(pid_side);
	MEDIAN_EL med_tab[MEDIAN_NUM];
	median_init(med_tab);
	
	// initialize sensors
	SetSensor(TOUCHLPORT, SENSOR_TOUCH);
	SetSensor(TOUCHRPORT, SENSOR_TOUCH);
	SetSensorLowspeed(SONSIDEPORT); 
	SetSensorLight(LIGHTFRPORT);

	// initialize median for SONSIDE (unused)
	int i, p;
	for(i=0;i<MEDIAN_NUM;i++)
	{
		p = SONSIDE;
		median_append(med_tab, p);
	}
	
	//corr_append(side_dist, SensorUS(IN_3));
	while(1)
	{
		// read sensors
		ClearScreen();
		byte ultr = SONSIDE;		
		print_val(LCD_LINE1, "ultra", ultr);	
		byte touchl = TOUCHL;
		print_val(LCD_LINE2, "touchl", touchl);
		byte touchr = TOUCHR;
		print_val(LCD_LINE3, "touchr", touchr);
		byte light_fr = LIGHTFR;
		print_val(LCD_LINE4, "light", light_fr);
		
		// calculate side distance deviation and pid value
		deviation = PID_REF - ultr;
		pid_out = pid_getval(pid_side, deviation);
		print_val(LCD_LINE5, "PID", pid_out);

		// calculate power correction for deviation reduction
		//power = 20;//abs_i(pid_out * PWR_T / MAX_SIDE_DIST);
		power = abs_i(pid_out * PWR_T / PID_MAX);
		print_val(LCD_LINE6, "POWER", power);

		// print robot's state
		print_val(LCD_LINE8, "state", rob_state);

		// if full frontal crash, override
		if (touchl && touchr)
		{
			eng_rev(PWR_B);
			Wait(FFRONTAL_REVT);
			eng_stop();
			eng_turn_right(FFRONTAL_RANGLE);
			rob_state = ST_STOP;
		}
		// if side frontal crash, override
		else if (touchl)
		{
			eng_rev(PWR_B);
			Wait(LFRONTAL_REVT);
			eng_turn_right(LFRONTAL_RANGLE);
			rob_state = ST_STOP;
		}
		else if (touchr)
		{
			eng_rev(PWR_B);
			Wait(RFRONTAL_REVT);
			eng_turn_right(RFRONTAL_RANGLE);
			rob_state = ST_STOP;
		}
		// STATE MACHINE
		switch (rob_state)
		{
			case ST_STOP:
				eng_fwd(PWR_B);	
				rob_state = ST_FWD;
				break;
			case ST_FWD:
				if (light_fr < FRONT_MIN)
				{
					PWR_B = CPWR_S;		// slowspeed mode
					//eng_fwd_reg(PWR_B, 0);
					//Wait(FRONT_TT);
					//rob_state = ST_FRONTT;
				}
				else
					PWR_B = CPWR_B;
				break;
			case ST_FRONTT:
				if (light_fr >= FRONT_MIN)
					rob_state = ST_FWD;
				else
				{
					eng_fwd_reg(PWR_B, 0);
					Wait(FRONT_TT);
				}
				break;
		}

		if( pid_out == 0 )
		{
			//eng_stop();
			eng_fwd(PWR_B);
			rob_state = ST_FWD;
		}
		else if ( pid_out > 0 )
		{
			//eng_rev(power);
			eng_fwd_reg(min_i(PWR_B + power, 75),max_i(PWR_B - power,10));
		//	rob_state = ST_CORR_R1;
		}
		else
		{
			//eng_rev(power);
			eng_fwd_reg(max_i(PWR_B - power,10), min_i(PWR_B + power, 75));
		//	rob_state = ST_CORR_L1;
		}

		Wait(100);
	}
}
