#include "utils.h"
#include "communication.h"
#include "move.h"
#define CPWR_B 60			// base speed of robot
#define CPWR_S 40			// slow speed of robot
#define FRONT_MIN 29		// minimal front light distance from fence for safe operating
#define FFRONTAL_REVT 300	// rev time if full frontal crash
#define FFRONTAL_RANGLE 70
#define LFRONTAL_REVT 300	// rev time if side left frontal crash
#define LFRONTAL_RANGLE 60	// angle (in degrees) to turn if side left frontal crash
#define RFRONTAL_REVT 300
#define RFRONTAL_RANGLE 80
#define FRONT_TT 100		// turn time if danger ahead

/* stain avoidance */
#define STAIN_LIGHT 45		// if measurement < this, we've got a radioactive stain
#define STAIN_REVT 450		// rev time if stain detected
#define STAIN_RANGLE 40	

/* quest for the reactor */
#define SCANS_INTERVAL 15	// how many program loops should pass between two reactor scans
#define GFI_SCANS_INTERVAL 15	// loops between reactor scans when in GO_FOR_IT
#define REACTOR_AHEAD 50	// if light_inactive > this, reactor was spotted
#define REACTOR_CLOSE 60	// reactor is very close
#define REACTOR_FOUND 80	// if l_i > this, reactor was found
#define GFI_FRONTAL_REVT 200
#define GFI_FRONTAL_RANGLE 90
#define GFI_FRONTAL_FWDT 300

/* sensors */
#define LIGHTFRPORT IN_2
#define LIGHTDOWNPORT IN_1	// exchangeable with Sonic Side!
#define SONSIDEPORT IN_1
#define TOUCHLPORT IN_4
#define TOUCHRPORT IN_3
#define LIGHTFR Sensor(LIGHTFRPORT)
#define LIGHTDW Sensor(LIGHTDOWNPORT)	// exchangeable with Sonic Side!
#define SONSIDE SensorUS(SONSIDEPORT)
#define TOUCHL Sensor(TOUCHLPORT)
#define TOUCHR Sensor(TOUCHRPORT)

/* states */
#define ST_STOP 0
#define ST_FWD 1
#define ST_FRONTT 6	// danger's ahead, must slowdown
#define ST_SCAN 7	// robot is scanning for the reactor
#define ST_GO_FOR_IT 90 // go fwd for the reactor
#define ST_SCAN_GFI 91	// scanning for the reactor while in GO FOR IT state
#define ST_FINISHED 100 // reactor found, do nothing

task main ()
{
	int PWR_B = CPWR_B;			// base speed of the robot
	int rob_state;				// robot state for machine of states
	int reactor_spotted = 0;
	int last_scan_val = 0;
	int time_count = 0;			// counts the time between reactor scans
	int scan_count = 0;			// counts scan rounds
	int time_count_gfi = 0;		// counts the time between scans when in GO_FOR_IT mode
	int crash_rotcount = 0;		// counts rotations while in crash drawback reactor quest mode
	unsigned int random_arc = 0;
	
	// initialize sensors
	SetSensor(TOUCHLPORT, SENSOR_TOUCH);
	SetSensor(TOUCHRPORT, SENSOR_TOUCH);
	//SetSensorLowspeed(SONSIDEPORT); 
	SetSensorLight(LIGHTDOWNPORT);
	SetSensorType(LIGHTFRPORT, SENSOR_TYPE_LIGHT_INACTIVE);
	SetSensorMode(LIGHTFRPORT, SENSOR_MODE_PERCENT);
	//SetSensorLight(LIGHTFRPORT);

	while(1)
	{
		// read sensors
		ClearScreen();
		/*byte ultr = SONSIDE;		
		print_val(LCD_LINE1, "ultra", ultr);	*/
		byte light_dw = LIGHTDW;
		print_val(LCD_LINE1, "light_d", light_dw);
		byte touchl = TOUCHL;
		print_val(LCD_LINE2, "touchl", touchl);
		byte touchr = TOUCHR;
		print_val(LCD_LINE3, "touchr", touchr);
		byte light_fr = LIGHTFR;
		print_val(LCD_LINE4, "light_f", light_fr);
	
		// print robot's state
		print_val(LCD_LINE8, "state", rob_state);
		
		// Random twist
		random_arc = Random(22);

		// if reactor found, finish it		
		if (light_fr > REACTOR_FOUND)
		{
			eng_stop();
			rob_state = ST_FINISHED;
			break;
		}
		// if radioactive stain detected, override
		if (light_dw < STAIN_LIGHT)
		{
			eng_rev(PWR_B);
			Wait(STAIN_REVT);
			eng_turn_right(STAIN_RANGLE);
			rob_state = ST_STOP;
		}
		// if full frontal crash, override
		if (touchl && touchr)
		{
			time_count = 0;
			eng_rev(PWR_B);
			Wait(FFRONTAL_REVT);
			eng_stop();
			eng_turn_right(FFRONTAL_RANGLE);
			rob_state = ST_STOP;
		}
		// if side frontal crash, override
		else if (touchl)
		{
			time_count = 0;
			// normal direction correction
			if ((rob_state != ST_GO_FOR_IT) && (rob_state != ST_SCAN_GFI))
			{
				eng_rev(PWR_B);
				Wait(LFRONTAL_REVT);
				eng_turn_right(LFRONTAL_RANGLE);
				rob_state = ST_STOP;
			}
			// correction if crashed next to the reactor
			else
			{
				// drawback from the obstacle
				eng_rev(PWR_B);
				Wait(GFI_FRONTAL_REVT);
				eng_stop();
				// check if reactor is left from the robot
				light_fr = LIGHTFR;
				last_scan_val = light_fr;
				crash_rotcount = 0;
				while (light_fr >= last_scan_val)
				{
					crash_rotcount++;
					last_scan_val = light_fr;
					eng_turn_left(13);
					Wait(50);
					light_fr = LIGHTFR;
				}
				eng_turn_right(GFI_FRONTAL_RANGLE);
				// reactor was found left from the robot
				if (light_fr > REACTOR_CLOSE)
				{
					eng_fwd(CPWR_S);
					rob_state = ST_GO_FOR_IT;
				}
				// reactor must be NE from the robot
				else
				{
					// rotate appropriately
					eng_turn_right(crash_rotcount * 13 + 100);
					// drawback from the reactor
					eng_fwd(PWR_B);
					Wait(GFI_FRONTAL_FWDT);
					eng_stop();
					// do a fullscan
					time_count = 0;
					scan_count = 0;
					last_scan_val = 0;
					rob_state = ST_SCAN;
				}
			}
		}
		else if (touchr)
		{
			time_count = 0;
			if ((rob_state != ST_GO_FOR_IT) && (rob_state != ST_SCAN_GFI))
			{
				eng_rev(PWR_B);
				Wait(RFRONTAL_REVT);
				eng_turn_right(RFRONTAL_RANGLE);
				rob_state = ST_STOP;
			}
			else
			{
				eng_rev(PWR_B);
				Wait(GFI_FRONTAL_REVT);
				eng_turn_left(GFI_FRONTAL_RANGLE);
				eng_fwd(PWR_B);
				Wait(GFI_FRONTAL_FWDT);
				eng_stop();
				time_count = 0;
				scan_count = 0;
				last_scan_val = 0;
				rob_state = ST_SCAN;
			}
		}
		// look for reactor
		if (light_fr > REACTOR_AHEAD)
		{
			PlayToneEx(400,100,4,false);
			reactor_spotted = 1;
			if ((rob_state != ST_SCAN) && (rob_state != ST_GO_FOR_IT) && (rob_state != ST_SCAN_GFI))
			{
				time_count = 0;
				scan_count = 0;
				last_scan_val = 0;
				rob_state = ST_SCAN;
			}
		}
		else
			reactor_spotted = 0;
		// time for a scan
		if (time_count++ == SCANS_INTERVAL)
		{
			time_count = 0;
			scan_count = 0;
			last_scan_val = 0;
			rob_state = ST_SCAN;
		}
		// STATE MACHINE
		switch (rob_state)
		{
			case ST_GO_FOR_IT:
			
				if (light_fr > REACTOR_CLOSE)
					eng_fwd(CPWR_S);		// slowdown a bit
				if (reactor_spotted == 0)
					rob_state = ST_STOP;
				time_count_gfi++;
				if (time_count_gfi == GFI_SCANS_INTERVAL)
					rob_state = ST_SCAN_GFI;
				break;
			case ST_STOP:
				eng_fwd(PWR_B);	
				rob_state = ST_FWD;
				break;
			case ST_FWD:
				//if (light_fr < FRONT_MIN)
				//{
				//	PWR_B = CPWR_S;		// slowspeed mode
					//eng_fwd_reg(PWR_B, 0);
					//Wait(FRONT_TT);
					//rob_state = ST_FRONTT;
				//}
				//else
					PWR_B = CPWR_B;
				break;
			case ST_FRONTT:
				if (light_fr >= FRONT_MIN)
					rob_state = ST_FWD;
				else
				{
					eng_fwd_reg(PWR_B, 0);
					Wait(FRONT_TT);
				}
				break;
			case ST_SCAN:
				time_count = 0;
				if ((last_scan_val > REACTOR_AHEAD) && (last_scan_val > light_fr))
				{
					eng_turn_left(20);
					PlayToneEx(400,100,4,false);
					reactor_spotted = 1;
					eng_fwd(PWR_B);
					time_count_gfi = 0;
					rob_state = ST_GO_FOR_IT;
				}
				else
				{
					last_scan_val = light_fr;
					scan_count++;
					eng_turn_right(20);
					if (scan_count == 22)
					{
						scan_count = 0;
						rob_state = ST_STOP;
						eng_turn_right((random_arc*20)%360);
					}
				}
				break;
			case ST_SCAN_GFI:
				light_fr = LIGHTFR;
				last_scan_val = light_fr;
				while (light_fr >= last_scan_val)
				{
					last_scan_val = light_fr;
					eng_turn_right(13);
					Wait(50);
					light_fr = LIGHTFR;
				}
				last_scan_val = light_fr;
				while(light_fr >= last_scan_val)
				{
					last_scan_val = light_fr;
					eng_turn_left(13);
					Wait(50);
					light_fr = LIGHTFR;
				}
				eng_turn_right(13);
				eng_fwd(PWR_B);
				time_count_gfi = 0;
				rob_state = ST_GO_FOR_IT;
				break;
			case ST_FINISHED:
				eng_stop();
				break;
		}
		// assure mainloop exit
		if (rob_state == ST_FINISHED)
			break;
		Wait(100);
	}
	ClearScreen();
	print_text(LCD_LINE1, "TARGET ACQUIRED!");
	while (1) {}
}
